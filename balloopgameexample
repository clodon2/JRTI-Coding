########################################################
# Author: Robert Ball - Coding, App and Game Design Instructor
# Program Name = 'Police Chase';
# Date = '12-08-21';
# Description = 'Level 1 top down pyGame';
#############################################################
# Import the pygame module
import pygame
# Import random for random numbers
import random
# Import pygame.locals for easier access to key coordinates
# Updated to conform to flake8 and black standards
from pygame.locals import (
                            RLEACCEL,
                            K_UP,
                            K_DOWN,
                            K_LEFT,
                            K_RIGHT,
                            K_ESCAPE,
                            KEYDOWN,
                            KEYUP,
                            K_SPACE,
                            QUIT,
)
SCREEN_WIDTH = 600
SCREEN_HEIGHT = 800


class Player(pygame.sprite.Sprite):
    moveCount = 0
    isMoving = False
    speed = 5
    Level = 1

    def setMoving(self, value):
        self.isMoving = value

    def increaseSpeed(self, increase):
        self.speed += increase

    def __init__(self):
        super(Player, self).__init__()
        self.surf = pygame.image.load("images/GuitarPlayerSmall.png").convert_alpha()
        self.rect = self.surf.get_rect(
            center=(
                    (SCREEN_WIDTH / 2),
                    (SCREEN_HEIGHT - 64),
            )
        )

    # Move the sprite based on speed
    def update(self, pressed_keys):
        playerAnimation = ["images/GuitarPlayerSmall.png",
        "images/police2s.png","images/police3s.png"]
        if self.moveCount > len(playerAnimation) - 1:
            self.moveCount = 0
            self.surf = pygame.image.load(playerAnimation[self.moveCount]).convert_alpha()
            self.moveCount += 1
        if pressed_keys[K_LEFT]:
            self.rect.move_ip(-self.speed, 0)
        if pressed_keys[K_RIGHT]:
            self.rect.move_ip(self.speed, 0)
        # Keep player on the screen
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.right > SCREEN_WIDTH:
            self.rect.right = SCREEN_WIDTH
        if self.rect.top <= 0:
            self.rect.top = 0
        if self.rect.bottom >= SCREEN_HEIGHT:
            self.rect.bottom = SCREEN_HEIGHT

# Initialize pygame
pygame.init()
Lives = 4
black = (0, 0, 0)
red = 178
green = 190
blue = 181
myFont = pygame.font.SysFont("Comicsans", 40)

# Setup the clock for a decent framerate
clock = pygame.time.Clock()

# Create the screen object
# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Police Chase: Welcome ")

# Instantiate player.
player = Player()

# Create groups to hold enemy sprites and all sprites
# - enemies is used for collision detection and position updates
# - all_sprites is used for rendering
all_sprites = pygame.sprite.Group()
all_sprites.add(player)

# Variable to keep the main loop running
running = True

# Main loop
while running:
    # Look at every event in the queue
    for event in pygame.event.get():
        # Did the user hit a key?
        if event.type == KEYDOWN:
            # Was it the Escape key? If so, stop the loop.
            if event.key == K_ESCAPE:
                running = False
            if event.key == K_LEFT or event.key == K_RIGHT:
                player.setMoving(True)

        if event.type == KEYUP:
            if event.key == K_LEFT or event.key == K_RIGHT:
                player.setMoving(False)
            # Did the user click the window close button? If so, stop the loop.
            elif event.type == QUIT:
                running = False

    # Get the set of keys pressed and check for user input and then update
    pressed_keys = pygame.key.get_pressed()
    player.update(pressed_keys)

    # Fill the screen with sky blue
    screen.fill((red, green, blue))
    # Draw all sprites

    for entity in all_sprites:
        screen.blit(entity.update, entity.rect)

    pygame.display.flip()
    # Ensure program maintains a maximum rate of 30 frames per second
    clock.tick(30)
